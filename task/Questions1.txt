1. What is the output of the following code

aSet = {1, 'Pune', ['abc', 'xyz'], True}
print(aSet)
 i.{1, ‘Pune’, [‘abc’, ‘xyz’]}
 ii.{1, ‘Pune’, [‘abc’, ‘xyz’], True}
 iii.TypeError
----->error
2. What is the output of the following union operation

set1 = {10, 20, 30, 40}
set2 = {50, 20, "10", 60}

set3 = set1.union(set2)
print(set3)

i. {40, 10, 50, 20, 60, 30}
ii. {40, ’10’, 50, 20, 60, 30}
iii. {40, 10, ’10’, 50, 20, 60, 30}
iv. SynatxError: Different types cannot be used with sets
------->iii
3. What is the output of the following code

sampleSet = {"Yellow", "Orange", "Black"}
print(sampleSet[1])
i. Yellow
ii. Type Error
iii. Orange
------>type error
4. What is the output of the following set operation

sampleSet = {"Yellow", "Orange", "Black"}
sampleSet.update(["Blue", "Green", "Red"])
print(sampleSet)
i. {‘Yellow’, ‘Orange’, ‘Red’, ‘Black’, ‘Green’, ‘Blue’}
ii. {‘Yellow’, ‘Orange’, ‘Black’, [“Blue”, “Green”, “Red”]}
iii. TypeError: update() doesn’t allow list as a argument.
------------->i
5. Select all the correct options to remove “Orange” from the set.

sampleSet = {"Yellow", "Orange", "Black"}
i. sampleSet.pop(“Orange”)
ii. sampleSet.discard(“Orange”)
iii. del sampleSet [“Orange”]
-------->ii
6. The symmetric_difference() method returns a set that contains all items from both sets, but not the items that are present in both sets.

 False
 True
----->true

7. What is the output of the following set operation

set1 = {"Yellow", "Orange", "Black"}
set2 = {"Orange", "Blue", "Pink"}

set3 = set2.difference(set1)
print(set3)
i. {‘Yellow’, ”Black’, ‘Pink’, ‘Blue’}
ii. {‘Pink’, ‘Blue’}
iii. {‘Yellow’, ”Black’}
----->ii
8. What is the output of the following

sampleSet = {"Yellow", "Orange", "Black"}
sampleSet.add("Blue")
sampleSet.add("Orange")
print(sampleSet)
i. {‘Blue’, ‘Orange’, ‘Yellow’, ‘Orange’, ‘Black’}
ii. {‘Blue’, ‘Orange’, ‘Yellow’, ‘Black’}
---------->ii
9. What is the output of the following

sampleSet = {"Yellow", "Orange", "Black"}
sampleSet.discard("Blue")
print(sampleSet)
i. {‘Yellow’, ‘Orange’, ‘Black’}
ii. KeyError: ‘Blue’
---------->i
10. The union() method returns a new set with all items from both sets by removing duplicates

 True
 False
----------->true
11. Select correct ways to create an empty dictionary

i. sampleDict = {}
ii. sampleDict = dict()
iii. sampleDict = dict{}
---------->both i and ii
12. Please select all correct ways to empty the following dictionary

student = { 
  "name": "Emma", 
  "class": 9, 
  "marks": 75 
}
i. del student
ii. del student[0:2]
iii. student.clear()
---------->iii
13. What is the output of the following dictionary operation

dict1 = {"name": "Mike", "salary": 8000}
temp = dict1.pop("age")
print(temp)
i. KeyError: ‘age’
ii. None
--------->i
14. Dictionary keys must be immutable

 True
 False
---------->true
15. Select the all correct way to remove the key ‘marks‘ from a dictionary

student = { 
  "name": "Emma", 
  "class": 9, 
  "marks": 75 
}
i. student.pop(“marks”)
ii. del student[“marks”]
iii. student.popitem()
iv. student.remove(“key2”)

---------->i,ii,iii
16. Select the correct way to access the value of a history subject

i
   
i. sampleDict[‘class’][‘student’][‘marks’][‘history’]
ii. sampleDict[‘class’][‘student’][‘marks’][1]
iii. sampleDict[‘class’][0][‘marks’][‘history’]
----------->i
17. What is the output of the following code

dict1 = {"key1":1, "key2":2}
dict2 = {"key2":2, "key1":1}
print(dict1 == dict2)
 True
 False
------->true
18. In Python, Dictionaries are immutable

 False
 True
-------->False
19. Select the correct ways to get the value of marks key.

student = {
  "name": "Emma",
  "class": 9,
  "marks": 75
}
i. m = student.get(2)
ii. m = student.get(‘marks’)
iii. m = student[2])
iv. m = student[‘marks’]
---------->ii,iv
20. Select the correct way to print Emma’s age.

student = {1: {'name': 'Emma', 'age': '27', 'sex': 'Female'},
           2: {'name': 'Mike', 'age': '22', 'sex': 'Male'}}
i. student[0][1]
ii. student[1][“age”]
iii. student[0][“age”]
------->ii
21. What is the output of the following

sampleDict = dict([
('first', 1),
('second', 2),
('third', 3)
])
print(sampleDict)

i. [ (‘first’, 100), (‘second’, 200), (‘third’, 300) ]
ii. Options: SyntaxError: invalid syntax
iii. {‘first’: 1, ‘second’: 2, ‘third’: 3}
----------->iii
22. What is the output of the following dictionary operation

dict1 = {"name": "Mike", "salary": 8000}
temp = dict1.get("age")
print(temp)

i. KeyError: ‘age’
ii. None
--------->none